name: Docker Image CI
on:
  schedule:
    - cron: 0 0 * * 1 #run every Monday 0:00
  push:
    branches:
        - master
        - 'v*'
  pull_request:
defaults:
  run:
    shell: bash
jobs:
  step1_build_base:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: detect current version
      run: . .github/detect_version.sh
    - name: build nodask
      run: |
        docker pull pdidevel/pditst:nodask || true
        docker build --pull \
          --cache-from pdidevel/pditst:nodask \
          -t pdidevel/pditst:nodask \
          -t pdidevel/pditst:nodask-${image_version} \
          1-bionic
    - name: publish nodask
      env:
        DOCKER_TOKEN: "${{ secrets.DOCKERHUB_TOKEN }}"
      run: |
        docker login -u jbigot -p "${DOCKER_TOKEN}"
        docker push pdidevel/pditst:nodask
        docker push pdidevel/pditst:nodask-${image_version}
    - name: build dask
      run: |
        docker pull pdidevel/pditst:nocompiler || true
        docker build --pull \
          --cache-from pdidevel/pditst:nocompiler \
          --build-arg "BASE_IMAGE=pdidevel/pditst:nodask-${image_version}" \
          -t pdidevel/pditst:nocompiler \
          -t pdidevel/pditst:nocompiler-${image_version} \
          2-spack
    - name: publish dask
      env:
        DOCKER_TOKEN: "${{ secrets.DOCKERHUB_TOKEN }}"
      run: |
        docker login -u jbigot -p "${DOCKER_TOKEN}"
        docker push pdidevel/pditst:nocompiler
        docker push pdidevel/pditst:nocompiler-${image_version}
  step2_build_compiler:
    strategy:
      matrix:
        compiler: ['gcc_latest', 'gcc_7.5.0', 'clang_latest', 'clang_8.0.0']
    needs: step1_build_base
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: detect current version
      run: . .github/detect_version.sh
    - name: build compiler
      env:
        COMPILER: "${{ matrix.compiler }}"
      run: |
        docker pull pdidevel/pditst:${COMPILER}-nobaselibs || true
        docker build --pull \
          --cache-from pdidevel/pditst:${COMPILER}-nobaselibs \
          --build-arg "COMPILER=$(echo -n ${COMPILER} | sed -e s/_/@/ -e s/@latest//)" \
          --build-arg "BASE_IMAGE=pdidevel/pditst:nocompiler-${image_version}" \
          -t pdidevel/pditst:${COMPILER}-nobaselibs \
          -t pdidevel/pditst:${COMPILER}-nobaselibs-${image_version} \
          3-compiler
    - name: publish compiler
      env:
        DOCKER_TOKEN: "${{ secrets.DOCKERHUB_TOKEN }}"
        COMPILER: "${{ matrix.compiler }}"
      run: |
        docker login -u jbigot -p "${DOCKER_TOKEN}"
        docker push pdidevel/pditst:${COMPILER}-nobaselibs
        docker push pdidevel/pditst:${COMPILER}-nobaselibs-${image_version}
    - name: build baselibs
      env:
        COMPILER: "${{ matrix.compiler }}"
      run: |
        docker pull pdidevel/pditst:${COMPILER}-nompi || true
        docker build --pull \
          --cache-from pdidevel/pditst:${COMPILER}-nompi \
          --build-arg "BASE_IMAGE=pdidevel/pditst:${COMPILER}-nobaselibs-${image_version}" \
          -t pdidevel/pditst:${COMPILER}-nompi \
          -t pdidevel/pditst:${COMPILER}-nompi-${image_version} \
          4-baselibs
    - name: publish baselibs
      env:
        DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        COMPILER: "${{ matrix.compiler }}"
      run: |
        docker login -u jbigot -p "${DOCKER_TOKEN}"
        docker push pdidevel/pditst:${COMPILER}-nompi
        docker push pdidevel/pditst:${COMPILER}-nompi-${image_version}
  step4_build_mpi:
    strategy:
      matrix:
        compiler: ['gcc_latest', 'gcc_7.5.0', 'clang_latest', 'clang_8.0.0']
        mpi:      ['openmpi_latest', 'openmpi_2.1.1']
    needs: step2_build_compiler
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: detect current version
      run: . .github/detect_version.sh
    - name: build
      env:
        COMPILER: "${{ matrix.compiler }}"
        MPI: "${{ matrix.mpi }}"
      run: |
        docker pull pdidevel/pditst:${COMPILER}-${MPI} || true
        docker build --pull \
          --cache-from pdidevel/pditst:${COMPILER}-${MPI} \
          --build-arg "BASE_IMAGE=pdidevel/pditst:${COMPILER}-nompi-${image_version}" \
          --build-arg "MPI=$(echo -n ${MPI} | sed -e s/_/@/ -e s/@latest//)" \
          -t pdidevel/pditst:${COMPILER}-${MPI} \
          -t pdidevel/pditst:${COMPILER}-${MPI}-${image_version} \
          5-mpi
    - name: publish
      env:
        DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        COMPILER: "${{ matrix.compiler }}"
        MPI: "${{ matrix.mpi }}"
      run: |
        docker login -u jbigot -p "${DOCKER_TOKEN}"
        docker push pdidevel/pditst:${COMPILER}-${MPI}
        docker push pdidevel/pditst:${COMPILER}-${MPI}-${image_version}
  step5_build_libs:
    strategy:
      matrix:
        compiler:        ['gcc_latest', 'gcc_7.5.0', 'clang_latest', 'clang_8.0.0']
        mpi:             ['openmpi_latest', 'openmpi_2.1.1']
        optlibs_version: ['latest', 'oldest']
    needs: step4_build_mpi
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: detect current version
      run: . .github/detect_version.sh
    - name: build
      env:
        COMPILER: "${{ matrix.compiler }}"
        MPI: "${{ matrix.mpi }}"
        OPTLIBS_VERSION: "${{ matrix.optlibs_version }}"
      run: |
        docker pull pdidevel/pditst:${COMPILER}-${MPI}-libs_${OPTLIBS_VERSION} || true
        docker build --pull \
          --cache-from pdidevel/pditst:${COMPILER}-${MPI}-libs_${OPTLIBS_VERSION} \
          --build-arg "BASE_IMAGE=pdidevel/pditst:${COMPILER}-${MPI}-${image_version}" \
          --build-arg "OPTLIBS_VERSION=${OPTLIBS_VERSION}" \
          -t pdidevel/pditst:${COMPILER}-${MPI}-libs_${OPTLIBS_VERSION} \
          -t pdidevel/pditst:${COMPILER}-${MPI}-libs_${OPTLIBS_VERSION}-${image_version} \
          6-optlibs
    - name: publish
      env:
        DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        COMPILER: "${{ matrix.compiler }}"
        MPI: "${{ matrix.mpi }}"
        OPTLIBS_VERSION: "${{ matrix.optlibs_version }}"
      run: |
        docker login -u jbigot -p "${DOCKER_TOKEN}"
        docker push pdidevel/pditst:${COMPILER}-${MPI}-libs_${OPTLIBS_VERSION}
        docker push pdidevel/pditst:${COMPILER}-${MPI}-libs_${OPTLIBS_VERSION}-${image_version}
