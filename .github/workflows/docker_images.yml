name: Docker Image CI
on:
  schedule:
    - cron: 0 0 * * 1 #run every Monday 0:00
  push:
    branches:
        - master
        - 'v*'
  pull_request:
defaults:
  run:
    shell: bash
jobs:
  build_bionic_1:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: detect current version
      run: . .github/detect_version.sh
    - name: build
      run: |
        set -ex
        docker build \
          -t pdidevel/bionic \
          -t pdidevel/bionic:${image_version} \
          1-bionic
    - name: publish
      env:
        DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      run: |
        set -ex
        docker login -u jbigot -p "${DOCKER_TOKEN}"
        docker push pdidevel/bionic
        docker push pdidevel/bionic:${image_version}
  build_gcc_2:
    strategy:
      matrix:
        gcc_version: ['latest', '7.5.0']
    needs: build_bionic_1
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: detect current version
      run: . .github/detect_version.sh
    - name: build
      env:
        GCC_VERSION: "${{ matrix.gcc_version }}"
      run: |
        set -ex
        docker build \
          --build-arg "GCC_VERSION=$([ latest = "${GCC_VERSION}" ] || echo "@${GCC_VERSION}")" \
          --build-arg "BASE_IMAGE=pdidevel/bionic:${image_version}" \
          -t pdidevel/bionic_gcc-${GCC_VERSION} \
          -t pdidevel/bionic_gcc-${GCC_VERSION}:${image_version} \
          2-gcc
    - name: publish
      env:
        DOCKER_TOKEN: "${{ secrets.DOCKERHUB_TOKEN }}"
        GCC_VERSION: "${{ matrix.gcc_version }}"
      run: |
        set -ex
        docker login -u jbigot -p "${DOCKER_TOKEN}"
        docker push pdidevel/bionic_gcc-${GCC_VERSION}
        docker push pdidevel/bionic_gcc-${GCC_VERSION}:${image_version}
  build_cmake_3:
    strategy:
      matrix:
        compiler:  ['gcc-latest', 'gcc-7.5.0']
        cmake_version: ['latest', '3.10.2']
    needs: build_gcc_2
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: detect current version
      run: . .github/detect_version.sh
    - name: build
      env:
        COMPILER: "${{ matrix.compiler }}"
        CMAKE_VERSION: "${{ matrix.cmake_version }}"
      run: |
        set -ex
        docker build \
          --build-arg "BASE_IMAGE=pdidevel/bionic_${COMPILER}:${image_version}" \
          --build-arg "CMAKE_VERSION=$([ latest = "${CMAKE_VERSION}" ] || echo "@${CMAKE_VERSION}")" \
          -t pdidevel/bionic_${COMPILER}_cmake-${CMAKE_VERSION} \
          -t pdidevel/bionic_${COMPILER}_cmake-${CMAKE_VERSION}:${image_version} \
          3-cmake
    - name: publish
      env:
        DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        COMPILER: "${{ matrix.compiler }}"
        CMAKE_VERSION: "${{ matrix.cmake_version }}"
      run: |
        set -ex
        docker login -u jbigot -p "${DOCKER_TOKEN}"
        docker push pdidevel/bionic_${COMPILER}_cmake-${CMAKE_VERSION}
        docker push pdidevel/bionic_${COMPILER}_cmake-${CMAKE_VERSION}:${image_version}
  build_openmpi_4:
    strategy:
      matrix:
        compiler:  ['gcc-latest', 'gcc-7.5.0']
        cmake: ['cmake-latest', 'cmake-3.10.2']
        openmpi_version: ['latest', '2.1.1']
    needs: build_cmake_3
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: detect current version
      run: . .github/detect_version.sh
    - name: build
      env:
        COMPILER: "${{ matrix.compiler }}"
        CMAKE: "${{ matrix.cmake }}"
        OPENMPI_VERSION: "${{ matrix.openmpi_version }}"
      run: |
        set -ex
        docker build \
          --build-arg "BASE_IMAGE=pdidevel/bionic_${COMPILER}_${CMAKE}:${image_version}" \
          --build-arg "MPI=openmpi$([ latest = "${OPENMPI_VERSION}" ] || echo "@${OPENMPI_VERSION}")" \
          -t pdidevel/bionic_${COMPILER}_${CMAKE}_openmpi-${OPENMPI_VERSION} \
          -t pdidevel/bionic_${COMPILER}_${CMAKE}_openmpi-${OPENMPI_VERSION}:${image_version} \
          4-mpi
    - name: publish
      env:
        DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        COMPILER: "${{ matrix.compiler }}"
        CMAKE: "${{ matrix.cmake }}"
        OPENMPI_VERSION: "${{ matrix.openmpi_version }}"
      run: |
        set -ex
        docker login -u jbigot -p "${DOCKER_TOKEN}"
        docker push pdidevel/bionic_${COMPILER}_${CMAKE}_openmpi-${OPENMPI_VERSION}
        docker push pdidevel/bionic_${COMPILER}_${CMAKE}_openmpi-${OPENMPI_VERSION}:${image_version}
  build_optlibs_5:
    strategy:
      matrix:
        compiler:  ['gcc-latest', 'gcc-7.5.0']
        cmake: ['cmake-latest', 'cmake-3.10.2']
        mpi: ['openmpi-latest', 'openmpi-2.1.1']
        optlibs_version: [ 'oldest' ]
    needs: build_openmpi_4
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: detect current version
      run: . .github/detect_version.sh
    - name: build
      env:
        COMPILER: "${{ matrix.compiler }}"
        CMAKE: "${{ matrix.cmake }}"
        MPI: "${{ matrix.mpi }}"
        OPTLIBS_VERSION: "${{ matrix.optlibs_version }}"
      run: |
        set -ex
        docker build \
          --build-arg "BASE_IMAGE=pdidevel/bionic_${COMPILER}_${CMAKE}_${MPI}:${image_version}" \
          --build-arg "OPTLIBS_VERSION=${OPTLIBS_VERSION}" \
          -t pdidevel/bionic_${COMPILER}_${CMAKE}_${MPI}_optlibs-${OPTLIBS_VERSION} \
          -t pdidevel/bionic_${COMPILER}_${CMAKE}_${MPI}_optlibs-${OPTLIBS_VERSION}:${image_version} \
          5-optlibs
    - name: publish
      env:
        DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        COMPILER: "${{ matrix.compiler }}"
        CMAKE: "${{ matrix.cmake }}"
        MPI: "${{ matrix.mpi }}"
        OPTLIBS_VERSION: "${{ matrix.optlibs_version }}"
      run: |
        set -ex
        docker login -u jbigot -p "${DOCKER_TOKEN}"
        docker push pdidevel/bionic_${COMPILER}_${CMAKE}_${MPI}_optlibs-${OPTLIBS_VERSION}
        docker push pdidevel/bionic_${COMPILER}_${CMAKE}_${MPI}_optlibs-${OPTLIBS_VERSION}:${image_version}
